require 'biotcm/table'
require 'fileutils'

class Layer
  # Table of nodes
  attr_reader :node_tab
  # Table of edges
  attr_reader :edge_tab

  # Load a layer from file(s)
  # @param path [String]
  def self.load(
    path = nil, prefix: '',
    edge_path: nil, node_path: nil,
    colname_source_node: 'Source',
    colname_target_node: 'Target',
    colname_interaction_type: nil
  )
    # Path convention
    if path
      edge_path = File.expand_path(prefix + 'edge.tab', path)
      node_path = File.expand_path(prefix + 'node.tab', path)
    end

    fin = File.open(edge_path)

    # Headline
    col = fin.gets.chomp.split("\t")
    unless (i_src = col.index(colname_source_node))
      fail ArgumentError, "Cannot find source node column: #{colname_source_node}"
    end
    unless (i_tgt = col.index(colname_target_node))
      fail ArgumentError, "Cannot find target node column: #{colname_target_node}"
    end
    col[i_src] = col[i_tgt] = nil
    if colname_interaction_type
      unless (i_typ = col.index(colname_interaction_type))
        fail ArgumentError, "Cannot find interaction type column: #{colname_interaction_type}"
      end
      col[i_typ] = nil
    else
      i_typ = nil
    end
    col.compact!

    # Initialize members
    node_tab = Table.new
    edge_tab = Table.new(primary_key: [colname_source_node, colname_interaction_type, colname_target_node].compact.join("\t"), col_keys: col)

    # Load edge_file
    node_in_table = node_tab.instance_variable_get(:@row_keys)
    col_size = edge_tab.col_keys.size
    fin.each do |line|
      col = line.chomp.split("\t")
      src = col[i_src]
      tgt = col[i_tgt]
      typ = i_typ ? col[i_typ] : nil
      # Insert nodes
      node_tab.row(src, []) unless node_in_table[src]
      node_tab.row(tgt, []) unless node_in_table[tgt]
      # Insert edge
      col[i_src] = col[i_tgt] = nil
      col[i_typ] = nil if i_typ
      col.compact!
      fail ArgumentError, "Row size inconsistent in line #{fin.lineno + 2}" unless col.size == col_size
      edge_tab.row([src, typ, tgt].compact.join("\t"), col)
    end

    # Load node_file
    if node_path
      tab = Table.load(node_path)
      node_tab.primary_key = tab.primary_key
      node_tab = node_tab.merge(tab)
    end

    return new(edge_tab: edge_tab, node_tab: node_tab)
  end
  #
  def initialize(edge_tab: nil, node_tab: nil)
    @edge_tab = edge_tab || Table.new(primary_key: 'Edge')
    @node_tab = node_tab || Table.new(primary_key: 'Node')
  end
  #
  def save(path, prefix = '')
    FileUtils.mkdir_p(path)
    @edge_tab.save(File.expand_path(prefix + 'edge.tab', path))
    @node_tab.save(File.expand_path(prefix + 'node.tab', path))
  end
end
